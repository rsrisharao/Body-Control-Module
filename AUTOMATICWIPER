 
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#define SET(PORT,BIT) PORT|=(1<<BIT)
#define CLEAR(PORT,BIT) PORT&=~(1<<BIT)
#define adp 0 

struct
{
 volatile unsigned int FLAG:1;
 volatile unsigned int FLAG2:1;
}FLAG_BIT;


volatile uint16_t adc_val=0x0000;
volatile uint16_t engine=0x0000;

uint16_t adc_read(uint8_t adc)
{
  ADMUX |= (1<<REFS0);
  ADMUX|=(adc & 0x0f);
  ADCSRA|=(1<<ADSC);
  while(ADCSRA &(1<<ADSC));
  return ADC;
}
int main()
{
  Serial.begin(9600);
  SET(DDRD,PD5); //MOTOR OUTPUT
  SET(DDRD,PD6);
  CLEAR(DDRC,PC0); //ANALOG INPUT
  CLEAR(DDRD,PD3); //ENGINE SWITCH
 
  CLEAR(PIND,PD3);
  CLEAR(PORTD,PD5);
  CLEAR(PINC,PC0);
  CLEAR(PORTD,PD6);
  
  EICRA|=(1<<ISC10);
  EICRA&=~(1<<ISC11);
  EIMSK|=(1<<INT1);
  
  TCNT0=0x0000;
   TCCR0A|=(1<<WGM01)|(1<<WGM00); //to set timer to CTC mode
    TCCR0B&=~(1<<WGM02);
  	TCCR0B|=(1<<CS00)|(1<<CS02);//To set prescaler to clk/1024
    TCCR0B&=~(1<<CS01);    
    TIMSK0|=(1<<OCIE0A)|(1<<OCIE0B);//to enable OCIE0A and OCIE0B
  OCR0A=255;
  sei();
  while(1)
  {
       ADCSRA|=(1<<ADEN);
      adc_val= adc_read(adp);
    
   if(FLAG_BIT.FLAG==1)
    {
      
      Serial.println(adc_val);
          if(adc_val==0)
          {
            CLEAR(PORTD,PD5);
            CLEAR(PORTD,PD6);
            OCR0B=0
            Serial.println("Case 1 val=0");
          }
          else if((adc_val>0)&&(adc_val<=341))
          {
           CLEAR(PORTD,PD6);
           OCR0B=63;
          Serial.println("Case 2 ");
          }
          else if((adc_val>341)&&(adc_val<=682))
          {
			CLEAR(PORTD,PD6);
            OCR0B=128;
            Serial.println("Case 3 ");
          }
          else
          {
            CLEAR(PORTD,PD6);
            OCR0B=189;
             Serial.println("Case 4");
          }
    }
    else
    {
      CLEAR(PORTD,PD5);
      CLEAR(PORTD,PD6);
    }
  }
  }


ISR(INT0_vect) 
{
 FLAG_BIT.FLAG=!FLAG_BIT.FLAG;
  Serial.println("flag is set");
}


ISR(TIMER0_COMPA_vect)
{
  PORTD&=~(1<<PD5);
}


ISR(TIMER0_COMPB_vect)
{
  PORTD |=(1<<PD5);
}
  

